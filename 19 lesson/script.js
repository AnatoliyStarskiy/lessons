"use strict";

// Замыкание и лексическое окружение
// Это фундаментальные концепции в JavaScript, которые позволяют создавать функции с "памятью" и управлять областью видимости переменных.
// Замыкание - это функция, которая запоминает своё лексическое окружение, даже когда она выполняется вне этого окружения.

let number = 5; // Глобальная переменная

function logNumber() {
    // Функция, которая использует глобальную переменную
    let number = 4; // Локальная переменная с тем же именем
    console.log(number); // Выводит значение переменной number
}

number = 6; // Изменяем значение переменной number

logNumber(); // Выводит: 4
console.log(number); // Выводит: 6

// В этом примере функция logNumber запоминает ссылку на переменную number из своего лексического окружения. Когда мы вызываем logNumber, она использует текущее значение number, которое равно 6.
// Лексическое окружение - это структура, которая определяет, какие переменные доступны в текущем контексте выполнения. Каждая функция создаёт своё собственное лексическое окружение.

function createCounter() {
    let counter = 0; // Локальная переменная, доступная только внутри createCounter и её замыканий

    return function () {
        // Возвращаемая функция является замыканием
        counter++; // Увеличиваем значение counter
        return counter; // Возвращаем текущее значение counter
    };
}

const increment = createCounter(); // Создаём экземпляр счётчика
console.log(increment()); // Выводит: 1
console.log(increment()); // Выводит: 2
console.log(increment()); // Выводит: 3

// В этом примере функция createCounter создаёт локальную переменную counter и возвращает внутреннюю функцию, которая увеличивает и возвращает значение counter. Эта внутренняя функция является замыканием, так как она "помнит" своё лексическое окружение, включая переменную counter, даже после того, как createCounter завершила выполнение.

// Таким образом, замыкания и лексическое окружение позволяют создавать функции с сохранённым состоянием и управлять областью видимости переменных в JavaScript.
// Это мощные инструменты для создания модульного и поддерживаемого кода.
// Замыкания и лексическое окружение играют ключевую роль в функциональном программировании и позволяют создавать более сложные структуры данных и поведения в JavaScript.