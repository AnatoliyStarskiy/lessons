"use strict";

// Объекты, деструктуризация объектов (ES6)
// Объект - это коллекция свойств, где каждое свойство имеет ключ и значение.
// Ключи (или свойства) - это строки (или символы), которые используются для доступа к значениям в объекте.
// Значения могут быть любого типа данных, включая другие объекты и функции.
// Деструктуризация - это синтаксис, который позволяет извлекать значения из объектов и массивов и присваивать их переменным.

const obj = new Object(); // Создание объекта через конструктор Object
// new Object() - это способ создания нового объекта в JavaScript.

const obj2 = {}; // Создание объекта через литерал объекта

// {} - это литерал объекта, который также используется для создания новых объектов.

const options = {
    name: "test",
    width: 1024,
    height: 1024,
    colors: {
        border: "black",
        bg: "red",
    },
    makeTest: function () {
        console.log("Test");
    }
};

options.makeTest(); // Вызов метода makeTest объекта options

// Доступ к свойствам объекта
// Существует два способа доступа к свойствам объекта: через точечную нотацию и через квадратные скобки.
// Точечная нотация используется, когда имя свойства известно заранее и является допустимым идентификатором JavaScript.
// Квадратные скобки используются, когда имя свойства хранится в переменной или не является допустимым идентификатором.


console.log(options.name); // 'test' - доступ к свойству name через точечную нотацию
console.log(options["name"]); // 'test' - доступ к свойству name через квадратные скобки

// Методы объекта
// Object.keys(obj) - возвращает массив ключей объекта
console.log(Object.keys(options)); // ['name', 'width', 'height', 'colors']
console.log(Object.keys(options).length); // 4 - количество свойств в объекте

// Удаление свойства из объекта - delete
// delete obj.prop - удаляет свойство prop из объекта obj

/* delete options.name; */ // Удаление свойства name из объекта options
/* console.log(options); */ // { width: 1024, height: 1024, colors: { border: 'black', bg: 'red' } }

let counter = 0; // Счетчик для подсчета свойств объекта

for (let key in options) {
    // Перебор всех свойств объекта options

    if (typeof options[key] === "object") {
        // Проверка, является ли значение свойства объектом
        for (let i in options[key]) {
            // Перебор всех свойств вложенного объекта
            console.log(`Свойство ${i} имеет значение ${options[key][i]}`); // Вывод ключа и значения вложенного свойства
            counter++; // Увеличение счетчика на 1
        }
    } else {
        console.log(`Свойство ${key} имеет значение ${options[key]}`); // Вывод ключа и значения свойства
        counter++; // Увеличение счетчика на 1
    }
}

console.log(counter); // Вывод общего количества свойств в объекте options (включая вложенные)

// Деструктуризация объекта
const { border, bg } = options.colors; // Извлечение свойств border и bg из объекта options.colors
console.log(border); // 'black'
console.log(bg); // 'red'
// Теперь мы можем использовать переменные border и bg напрямую


// Свойства и методы объектов
// Свойства - это характеристики объекта, которые описывают его состояние или данные.
// Методы - это функции, которые принадлежат объекту и могут изменять его состояние или выполнять действия с ним.

// Пример объекта с методами
const person = {
    name: "Alice", // свойство name
    greet: function () {
        // метод greet
        console.log(`Hello, my name is ${this.name}`);
    },
};

person.greet(); // Вызов метода greet, который использует свойство name

// В этом примере у объекта person есть свойство name и метод greet.
// Метод greet использует ключевое слово this для доступа к свойству name объекта person.

console.log(Object.keys(person).length); // 2 - количество свойств и методов в объекте person
console.log(Object.keys(person)); // ['name', 'greet'] - массив ключей объекта person

// Итог: Объекты в JavaScript - это динамические структуры данных, которые могут содержать свойства и методы.
// Они позволяют организовывать данные и функциональность в логические единицы, что делает код более структурированным и удобным для работы.

// JS - объектно-ориентированный язык программирования, где почти все является объектом.
// Объекты - это коллекции данных и функциональности, которые можно создавать, изменять и использовать в программе.